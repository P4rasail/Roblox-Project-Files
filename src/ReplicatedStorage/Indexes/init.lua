--[[
   Creator: Paras/P4rasail
   Date: 2023/10/10
   Description: Indexes module for managing module references.
   Functions: OnLoad, Load
   Example: Indexes:Load()
   Generated by Copilot
]]

local RepStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")


local Modules = RepStorage:WaitForChild("Modules")

local Util = Modules:WaitForChild("Util")

local Indexes = {
	DirectRef = {},
	FailedRef = {},
	Modules = {}
}
local metatable = {
	__index = function(tab,index)
		if tab == _G then
			if index == "Indexes" then
			if not rawget(_G,"Indexes") then
				repeat task.wait() until rawget(_G,"Indexes")
			end
			local Raw = rawget(_G,"Indexes")
			if not Raw.Loaded then
				repeat task.wait() until Raw.Loaded
			end
			return Raw
			elseif Indexes.DirectRef[index] then
				return Indexes.DirectRef[index]
			elseif Indexes.FailedRef[index] then
				error(debug.traceback(`_G index of {index} was not initiated properly,therefore doesn't work.`),10)
				return nil
			end
		end
	end
}


--Meap
function CheckTab(Array)
	if not Array then return end
	for i,v in Array do
		if not v then
			return false
		end
	end
	return true
end

function Indexes:OnLoad(Func)
	if not Func then return end
	if typeof(Func) == "function" then
		task.spawn(function()
			repeat task.wait() until Indexes.Loaded
			Func()
		end)
	end
end

function Indexes:Load()
	
	local FailedModules = {}
	
	local Config = require(script:WaitForChild("Config"))
	local Array = require(Util:WaitForChild("Array"))
	if RunService:IsServer() then
		local ServerStorage = game:GetService("ServerStorage")
		local Modules = ServerStorage:WaitForChild("Modules")
		Indexes.ServerModules = {}
		_G.ServerModules = Indexes.ServerModules
		for i,v in Modules:GetChildren() do
			local LoadedModules = {}
			Indexes.ServerModules[v.Name] = {}
			local Failed = {}
			local function Added(x:ModuleScript)
				if x:IsA("ModuleScript") then
					LoadedModules[x] = false
					if x:GetAttribute("DontWait") then
						LoadedModules[x] = true
					end
					task.spawn(function()
						local DirectIssue = x:GetAttribute("DirectReference") and true or false
						local Success,Fail = xpcall(function()
							Indexes.ServerModules[v.Name][x.Name] = require(x)
							if x:GetAttribute("DirectReference") then
								Indexes.DirectRef[x.Name] = Indexes.ServerModules[v.Name][x.Name]
								DirectIssue = false
							end
						end,function(FailMSG)
							if FailMSG then
								if DirectIssue then
									warn(`A Direct _G Reference, {x.Name} has failed to load properly. prob a big issue`)
									Indexes.FailedRef[x.Name] = true
								end
								Failed[x.Name ] = debug.info(10,"sl")
							else
								print(x.Name.." Succeeded Loading...")
							end
						end)

						LoadedModules[x] = true
					end)


				else
					Indexes.ServerModules[v.Name][x.Name] = x
				end
			end
			for e,x in v:GetChildren() do
				Added(x)
			end
			v.ChildAdded:Connect(Added)
			repeat task.wait() until CheckTab(LoadedModules)
			if Array:CountTable(Failed) > 0 then
				FailedModules[v.Name] = Failed
				warn("SOME MODULES FAILED.\n MODULES FAILED: ",Failed)
			end
			
		end
	end
	for i,v in Modules:GetChildren() do
		local LoadedModules = {}
		Indexes.Modules[v.Name] = {}
		local Failed = {}
		local function Added(x:ModuleScript)
			if x:IsA("ModuleScript") then
				LoadedModules[x] = false
				if x:GetAttribute("DontWait") then
					LoadedModules[x] = true
				end
				task.spawn(function()
					local DirectIssue = x:GetAttribute("DirectReference") and true or false
					local Success,Fail = xpcall(function()
						Indexes.Modules[v.Name][x.Name] = require(x)
						if x:GetAttribute("DirectReference") then
							Indexes.DirectRef[x.Name] = Indexes.Modules[v.Name][x.Name]
							DirectIssue = false
						end
					end,function(FailMSG)
						if FailMSG then
							if DirectIssue then
								warn(`A Direct _G Reference, {x.Name} has failed to load properly. prob a big issue`)
								Indexes.FailedRef[x.Name] = true
							end
							Failed[x.Name ] = debug.info(10,"sl")
						else
							print(x.Name.." Succeeded Loading...")
						end
					end)

					LoadedModules[x] = true
				end)


			else
				Indexes.Modules[v.Name][x.Name] = x
			end
		end
		for e,x in v:GetChildren() do
			Added(x)
		end
		v.ChildAdded:Connect(Added)
		repeat task.wait() until CheckTab(LoadedModules)
		if Array:CountTable(Failed) > 0 then
			FailedModules[v.Name] = Failed
		warn("SOME MODULES FAILED.\n MODULES FAILED: ",Failed)
		end
	end
	for i,v in Config do
		local Service = game:GetService(i)
		if Service then
			for i,v in v do
			local Tab = v
			if typeof(Tab) == "string" then
				Tab = {Tab}
			elseif typeof(Tab) == "table" then
				Tab = table.clone(Tab)
			end
			local Found = Service
			repeat
				--print(Tab[1])
				Found = Found:FindFirstChild(Tab[1])
				table.remove(Tab,1)
			until not Found or #Tab == 0
			if Found then
				Indexes[Found.Name] = Found
			end
			end
		end
	end
	for i,v in Indexes.Modules do
		for e,x in v do
			if typeof(x) == "table" then
			x.Indexed = true
			end
		end
	end
	Indexes.Loaded = true
	local Count = Array:CountTable(FailedModules)
	if Count > 0 then
		return false,Count
	end
	return true
end


_G.Indexes = Indexes
_G.Modules = Indexes.Modules
setmetatable(_G,metatable)
return Indexes

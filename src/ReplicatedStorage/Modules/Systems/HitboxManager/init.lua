--[[
   Creator: Paras/P4rasail
   Date: 2023/10/10
   Description: HitboxManager module for managing hitboxes.
   Functions: HookObject, DestroyObject
   Example: HitboxManager:HookObject(instance, "Character", "ID")
   Generated by Copilot
]]

local HitboxManager = {
	Hitboxes = {},
	Obscure = {}
}

local Types = {
	"Character",
	"Area"
}
_G.HitboxTypes = Types

function HitboxManager:HookObject(Object:Instance,Type,ID:string,Extensions)
	Extensions = Extensions or {}
	ID = ID or ""
	if typeof(Type) ~= "string" then
		return
	end
	local PrevObject = Object
	--print(Object)
	if typeof(Object) ~= "Instance" then 
		Object = Instance.new("Folder")
		Object.Name = tostring(PrevObject)
		Object.Parent = script.HitboxStorage
		HitboxManager.Obscure[tostring(PrevObject)] = Object
	end


	local Fold = Object:FindFirstChild("Hitboxes")
	if not Fold then
		Fold = Instance.new("Folder")
		Fold.Name = "Hitboxes"
		Fold.Parent = Object
	end
	HitboxManager.Hitboxes[Object] = Fold
	local function Get(HitboxObject:ModuleScript?)
		if HitboxObject then
			--print(ID,Type)
			--print(HitboxObject:GetAttribute("ID"),HitboxObject:GetAttribute("Type"))
		end
		if not HitboxObject or (HitboxObject:GetAttribute("Type") ~= Type and HitboxObject:GetAttribute("ID") ~= ID) then
			local Valid = not HitboxObject

			HitboxObject = script.HitboxObject:Clone()
			HitboxObject.Name = "HitboxObject"

			HitboxObject:SetAttribute("ID",ID)
			HitboxObject:SetAttribute("Type",Type)



			Object.Destroying:Once(function()
				HitboxObject:Destroy()
				
			end)
			--end


		end
		if HitboxObject then
			HitboxObject.Parent = Fold
			--print(HitboxObject)
			local Mod = require(HitboxObject)
			Mod.Type = Type
			if not Mod.CharStorage then
			Mod.CharStorage = {}
			end
			table.insert(Extensions,Mod)
			for i,v in Extensions do
				if not table.find(Mod.CharStorage,v) then
					table.insert(Mod.CharStorage,v)
				end
			end
			--if Valid then

			if HitboxObject.Name ~= "HitboxObject" then
				HitboxObject.Name = "HitboxObject"
			end
			local Mod = require(HitboxObject)

			return Mod,HitboxObject
		end

	end
	local function Added(HitboxObject:ModuleScript)
		--print(HitboxObject)
		if HitboxObject.Name ~= "HitboxObject" then return 1 end
		local ValueReturn = Get(HitboxObject)
		--print(ValueReturn)
		if ValueReturn then return ValueReturn end
	end
	for i,HitboxObject in Fold:GetChildren() do
		local Val = Added(HitboxObject)

		if Val == 1 then continue end
		if Val then return Val end
	end
	local Result =  Get()
	--print(Result)
	return Result
end

function HitboxManager:DestroyObject(Object:Instance,Type,ID)
	if typeof(Type) ~= "string" then
		return
	end
	local PrevObject = Object
	if typeof(Object) ~= "Instance" then 
		Object = HitboxManager.Obscure[tostring(Object)]
		if Object then
			task.defer(function()
				Object:Destroy()
				HitboxManager.Obscure[tostring(PrevObject)] = nil
			end)
		end
	end
	if not Object then return end



	local Fold = HitboxManager.Hitboxes[Object] 
	if not Fold then return end
	for i,v in Fold:GetChildren() do
		if v.Name == "HitboxObject" then

			if Type == "All" or v:GetAttribute("Type") == Type then
				if ID == "All" or v:GetAttribute("ID") == ID then
					v:Destroy()
				end
			end
		end
	end
end

setmetatable(HitboxManager,{
	__call = function(tab,...)
		local Args = {...}
		if Args[1] == "Destroy" then
			table.remove(Args,1)
			return tab:DestroyObject(unpack(Args))
		else
			return tab:HookObject(...)
		end
	end,
})

return HitboxManager

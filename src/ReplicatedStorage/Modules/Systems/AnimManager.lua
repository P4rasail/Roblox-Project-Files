--[[
AnimManager Module

This module provides functionality to manage animations in Roblox. It includes methods to create animation settings, search for animations, play and stop animations, and retrieve animation names.

Types:
- AnimSearch: A type representing a search query for animations.
- AnimObject: A type representing an object containing an Animator.
- PlaySettings: A type representing settings for playing an animation.

Functions:
- createPlaySettings(playSettings: PlaySettings): PlaySettings
	Creates and returns a table of play settings with default values if not provided.

- searchAnim(name: AnimSearch): Animation?
	Searches for an animation by its name and returns the Animation object if found.

- createSearchName(anim: Animation): string
	Creates and returns a string representing the search name of the animation.

- createConstructor(Animator: Animator): AnimObject
	Creates and returns a new AnimObject containing the provided Animator.

- AnimManager:createConstructor(Animator: Animator): AnimObject
	Creates and returns a new AnimObject containing the provided Animator.

- AnimManager:StopAnim(Constructor: AnimObject, animName: AnimSearch, playSettings: PlaySettings)
	Stops the animation with the specified name and play settings.

- AnimManager:PlayAnim(Constructor: AnimObject, animName: AnimSearch, playSettings: PlaySettings): AnimationTrack
	Plays the animation with the specified name and play settings, and returns the AnimationTrack.

- AnimManager:GetAnims(animName: AnimSearch): table
	Retrieves and returns a table of animation names found by the search query.

- AnimManager:FindAnim(Constructor: AnimObject, ID: string): AnimationTrack?
	Finds and returns the AnimationTrack with the specified ID if it is currently playing.

Returns:
- AnimManager: The module containing all the above functions.
]]
local AnimManager = {}

export type AnimSearch = {
	string
}
export type AnimObject = {
	Animator:Animator,
	
}
export type PlaySettings = {
	Weight:number?,
	FadeTime:number?,
	Speed:number?,
	Priority:Enum.AnimationPriority?,
	Looped:boolean?,
	ID:string?
}


function createPlaySettings(playSettings:PlaySettings)
	playSettings = playSettings or {}
	local settingsTable:PlaySettings = {
		Weight = playSettings.Weight or 1,
		FadeTime = playSettings.FadeTime or .2,
		Speed = playSettings.Speed or 1,
		Priority = playSettings.Priority or Enum.AnimationPriority.Idle,
		Looped = playSettings.Looped or false,
		ID = playSettings.ID or ""
	}
	
	return settingsTable
end
function searchAnim(name:AnimSearch):Animation?
	if typeof(name) == "string" then
		name = {name}
	end
local found:Animation? = script
	for i,v in name do
		if found and found:FindFirstChild(v) then
			found = found:FindFirstChild(v)
		else
			return nil
		end
	end
	return found
end

function createSearchName(anim:Animation)
	local StrName = anim.Name
	local found = anim
	if anim:FindFirstAncestorOfClass("ModuleScript") == script then
		while found.Parent ~= script do
			StrName = found.Parent.Name.."."..StrName
			found = found.Parent
		end
	end
	return StrName
end

function createConstructor(Animator:Animator)
	local newTab:AnimObject = {
		Animator = Animator,
		
	}

	return newTab
end

function AnimManager:createConstructor(Animator:Animator)
	return createConstructor(Animator)
end
function AnimManager:StopAnim(Constructor:AnimObject,animName:AnimSearch,playSettings:PlaySettings)
	playSettings = createPlaySettings(playSettings)
	for i,v:AnimationTrack in Constructor.Animator:GetPlayingAnimationTracks() do
		-- Generated by Copilot
		for _,x in ipairs(animName) do
		if v.Name == x then
			v:Stop(playSettings.FadeTime)
		end
		end
	end
end
-- Searches for an animation by its name and assigns it to the variable `newAnim`.
	-- @param animName string - The name of the animation to search for.
	-- @return Animation - The animation object found by the search.
	-- @param animName The name of the animation to search for.
	-- @return The animation object found by the search.
function AnimManager:PlayAnim(Constructor:AnimObject,animName:AnimSearch,playSettings:PlaySettings):AnimationTrack
	playSettings = playSettings or {}
	
	local newAnim = searchAnim(animName)
	if not newAnim then
		return nil
	end
	playSettings = createPlaySettings(playSettings)
	local newAnim = searchAnim(animName)
	AnimManager:StopAnim(Constructor,{playSettings.ID},playSettings)
	local search = createSearchName(newAnim)
	local anim = Constructor.Animator:LoadAnimation(newAnim)
	anim.Name = playSettings.ID
	anim.Priority = playSettings.Priority
	anim.Looped = playSettings.Looped
	anim.Stopped:Connect(function()
		repeat
			anim:Stop() 
			task.wait()
		until not anim.IsPlaying
		anim:Destroy()
	end)
	anim:Play(playSettings.FadeTime,playSettings.Weight,playSettings.Speed)
	return anim
end
function AnimManager:GetAnims(animName:AnimSearch)
	local newAnim = searchAnim(animName)
	if not newAnim then
		return {}
	end
	local TableIndexes = {}
	for i,v in newAnim:GetChildren() do
		table.insert(TableIndexes,v.Name)
	end
	return TableIndexes
end
function AnimManager:FindAnim(Constructor:AnimObject,ID:string)
	for i,v:AnimationTrack in Constructor.Animator:GetPlayingAnimationTracks() do
		if v.Name == ID then
				return v
			end
	end
end


return AnimManager
